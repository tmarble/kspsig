#!/usr/bin/python3
# -*- Mode: python; py-indent-offset: 2; coding: utf-8  -*-
# kspsig
#
# Copyright (c) 2017 Tom Marble
# Licensed under GPLv3 or later  http://www.gnu.org/licenses/gpl-3.0.txt
#
# Key Signing Party signature verification tool
# http://github.com/tmarble/kspsig

import os
import os.path
import sys
import textwrap
import argparse
import time

# Field 2 validity
# https://sources.debian.net/src/gnupg2/2.1.23-1/doc/DETAILS/
def validity(v):
  validity_string = 'unknown'
  if v == 'i' or v == 'n':
    validity_string = 'invalid'
  elif v == 'd':
    validity_string = 'disabled'
  elif v == 'd':
    validity_string = 'disabled'
  elif v == 'r':
    validity_string = 'revoked'
  elif v == 'e':
    validity_string = 'expired'
  elif v == 'm':
    validity_string = 'marginal'
  elif v == 'f':
    validity_string = 'full'
  elif v == 'u':
    validity_string = 'ultimate'
  elif v == 's':
    validity_string = 'disabled'
  elif v == 'd':
    validity_string = 'special'
  validity_string = '[' + validity_string + ']'
  return validity_string

# Field 6 to date string
# https://sources.debian.net/src/gnupg2/2.1.23-1/doc/DETAILS/
def timestamp_to_date(timestamp):
  if timestamp.find('T') > 0: # ISO 8601
    utc = time.strptime(timestamp, '%Y%m%dT%H%M%S')
  else:
    utc = time.gmtime(int(timestamp))
  date_string = time.strftime('%Y-%m-%d', utc)
  return date_string

def expires_to_date(timestamp):
  if len(timestamp) == 0:
    return '' # does not expire
  return '[expires: %s]' % timestamp_to_date(timestamp)

# Field 11 signature_class
# https://sources.debian.net/src/gnupg2/2.1.23-1/doc/DETAILS/
def signature_class(c):
  if len(c) == 3 and c != '10x':
    return c[1]
  return ' '

# Field 12 capability
# https://sources.debian.net/src/gnupg2/2.1.23-1/doc/DETAILS/
def capability(cap):
  cap_string = '['
  for c in cap:
    if c.islower():
      cap_string += c.upper()
  cap_string += ']'
  return cap_string


class KSPSig:
  """
  Key Signing Party signature verification tool
  """
  VERSION = '0.9.0'

  def __init__(self, args):
    self.args = args
    (self.args.key, self.key_string) = self.get_key(self.args.key, True)
    if self.args.outgoing:
      (self.args.outgoing, self.outgoing_string) = self.get_key(self.args.outgoing)
    if self.args.verbose:
      print('key:      %s = %s' % (self.args.key, self.key_string))
      if self.args.outgoing:
        print('outgoing: %s = %s' % (self.args.outgoing, self.outgoing_string))
    # For hashalsos definitions see...
    # https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-02#section-9.5
    # see also http://tools.ietf.org/html/rfc4880#section-9.4
    self.hashalgos = {
      1: "MD5",
      2: "SHA1",
      3: "RIPEMD160",
      8: "SHA256",
      9: "SHA384",
      10: "SHA512",
      11: "SHA224",
      12: "SHA3-256",
      14: "SHA3-512"}
    # max hash algorithm name length (does not consider Unknown or Reserved)
    self.hashalgo_max = max([len(x) for x in self.hashalgos.values()])
    self.pubalgos = { # Public-Key Algorithms
      1: "RSA",
      2: "RSA [E]", # encrypt only
      3: "RSA [S]", # sign only
      16: "Elgamal",
      17: "DSA",
      18: "ECDH",
      19: "ECDSA",
      22: "EdDSA"}
    # max public key algorithm name length
    self.pubalgo_max = max([len(x) for x in self.pubalgos.values()])
    self.list_sigs_handlers = { # record handlers in list_sigs
      'pub': self.list_sigs_pub,
      'fpr': self.list_sigs_fpr,
      'uid': self.list_sigs_uid,
      'sig': self.list_sigs_sig,
      'unk': self.list_sigs_unk}

  def hashalgo_name(self, hashalgo):
    """
    Return the name of the hash algorithm given the number (from RFC 4880)
    If the hashalgo == 0 it is probably because we didn't find
    what it's value should be (thus return 'Unknown').
    All other values which are not in the lookup table are assumed
    to be 'Reserved'
    """
    hashalgo = int(hashalgo) # coerce to int
    if hashalgo == 0:
      name = 'Unknown'
    elif hashalgo in self.hashalgos:
      name = self.hashalgos[hashalgo]
    else:
      name = 'Reserved'
    return name

  def pubalgo_name(self, pubalgo):
    """
    Return the name of the public key algorithm given the number (from RFC 4880)
    If the pubalgo == 0 it is probably because we didn't find
    what it's value should be (thus return 'Unknown').
    All other values which are not in the lookup table are assumed
    to be 'Reserved'
    """
    pubalgo = int(pubalgo) # coerce to int
    if pubalgo == 0:
      name = 'Unknown'
    elif pubalgo >= 100 and pubalgo <= 110:
      name = 'Private'
    elif pubalgo in self.pubalgos:
      name = self.pubalgos[pubalgo]
    else:
      name = 'Reserved'
    return name

  def error(self, msg = 'unknown error', rv = 255):
    sys.stderr.write(self.args.program + ': ' + msg + '\n')
    return rv

  def get_hex2string(self, keyid, getuid = 1):
    """
    Get the human readable string for an ID (by default the first uid).
    Optionally a given uid can be specified (NOTE: this is relative
    to the order of uid's provided from gpg --list-key ID)

    If the string is not available it is probably because the user
    does not have that key in their keyring.  Adding a new can be
    performed with % gpg --recv-keys ID
    """

    # uidstring = '[User ID #%d not found for: %s]' % (getuid, keyid)
    uidstring = '[uid#%d %s]' % (getuid, keyid)
    gpg = os.popen('gpg --homedir ' + self.args.gnupghome + ' --with-colons --list-key ' + keyid + ' 2> /dev/null')
    lines = gpg.readlines()
    gpg.close()
    uid = 0
    for line in lines:
      fields = line.split(':')
      if len(fields) > 9 and fields[0] == 'uid':
        uid += 1
        if uid == getuid:
          uidstring = fields[9]
          break
    return uidstring

  def get_string2hex(self, keyid):
    """
    Get the hex ID from a human readable string for an ID.
    Arbitrarily pick the last matching public key!!!
    Return None if not found

    If the ID is not available it is probably because the user
    does not have that key in their keyring.  Adding a new can be
    performed with % gpg --recv-keys ID

    NOTE: will return the full 16 digit hex id
    This important later on because gpg --list-packets uses 16 digit keys.
    """
    hexid = None
    gpg = os.popen('gpg --homedir ' + self.args.gnupghome + ' --with-colons --list-key ' + keyid + ' 2> /dev/null')
    lines = gpg.readlines()
    gpg.close()
    for line in lines:
      fields = line.split(':')
      if len(fields) > 4 and fields[0] == 'pub':
        hexid = '0x' + fields[4]
        break
    return hexid

  def is_hex(self, id):
    """
    Return True if id is at least 8 characters long and is
    valid hexadecimal.
    """
    ishex = False
    if len(id) >= 8:
      try:
        h = int(id, 16)
        ishex = True
      except ValueError:
        pass
    return ishex

  def get_key(self, key, default=False):
    """
    If default==True this will find the default ID to use
      by looking for the first 'default-key' setting in gpg.conf, or
      the first secret key.
    Will return a tuple (key, key_string) which is the hexid
    and first UID for key.
    """
    key_string = ''
    if default and not key:
      gpgconf = os.path.expanduser(self.args.gnupghome + '/gpg.conf')
      if os.path.exists(gpgconf):
        gpgconf_file = open(gpgconf)
        lines = gpgconf_file.readlines()
        gpgconf_file.close()
        for line in lines:
          fields = line.split()
          if len(fields) > 1 and fields[0] == 'default-key':
            key = ' '.join(fields[1:])
            # print('DEBUG found default-key: %s' % key)
            break
      if not key: # get the first secret key
        gpg = os.popen('gpg --homedir ' + self.args.gnupghome + ' --with-colons --list-secret-keys')
        lines = gpg.readlines()
        gpg.close()
        line = lines[0]
        fields = line.split(':')
        if len(fields) < 10:
          sys.exit(self.error('Unable to list secret-keys'))
        if fields[0] != 'sec':
          sys.exit(self.error('Error in --list-secret-keys: %s' % line))
        key = fields[4]
        # print('DEBUG found first secret key: %s' % key)
    if self.is_hex(key):
      # insure that we have a full 16 digit hex key
      key = self.get_string2hex(key)
    else:
      # insure that we have a full 16 digit hex key
      hexid = self.get_string2hex(key)
      if hexid:
        key = hexid
      else:
        sys.exit(self.error('ID is not found in the keyring: %s' % key))
    key_string = self.get_hex2string(key)
    return (key, key_string)

  def incoming(self):
    """
    Function to display the hash algorithm used by signatures sent
    to you by others at a Key Signing Party.  Typically caff sends
    out an e-mail with an attachment of the form:

    0x1111222233334444.1.signed-by-0x5555666677778888.asc

    Where the first hex string is the users ID (followed by the uid),
    the second hex string is the signatory ID.

    If the user stores all of these (as yet unimported) signatures
    in a given directory then (since this is the default action) this
    program can be run as simply as:

    % kspsig *.asc

    NOTE: function has been expanded to support any filename (*.asc)
    and print out the public key and UID for which the following
    signatures are made.
    """
    for sigpath in self.args.incoming:
      if not os.path.exists(sigpath):
        return self.error('cannot open: %s' % sigpath, 6)
      else:
        sig = os.path.basename(sigpath)
        print('file:     %s' % sig)
        fields = sig.split('.')
        skey = fields[0]
        suid = fields[1]
        sby = fields[2].split('-')[2]
        if not skey or not suid or not sby:
          return self.error('filename not in the format of SIGNEDKEY.UID.SIGNEDBY: %s' % sigpath)
        myid = None
        uidstring = None
        hashalgo = 0
        gpg = os.popen('gpg --list-packets ' + sigpath)
        lines = gpg.readlines()
        gpg.close()
        packet = None
        keyid = None
        uidstring = 'Unknown'
        hashalgo = 'Unknown'
        firstsig = False
        for line in lines:
          fields = line.split(':')
          if len(fields) > 1:
            fields[1] = fields[1].strip()
            if fields[1] == 'public key packet':
              packet = fields[1]
            elif fields[1] == 'user ID packet':
              packet = fields[1]
              uidstring = fields[2].strip()
            elif fields[1] == 'signature packet':
              packet = fields[1]
              i = fields[2].find('algo ')
              j = fields[2].find(', keyid ')
              if i >= 0 and j > 0:
                algo = fields[2][i + 5:j] # SIGNATURE algo!
                keyid = '0x' + fields[2][j + 8:].strip()
            elif packet == 'public key packet' and fields[0] == 'keyid':
              keyid = '0x' + fields[2].strip()
              if keyid != skey:
                self.error("The filename claims to sign key %s but the actual data is signing the key %s" % (skey, keyid))
          elif packet == 'signature packet' and keyid != skey:
            i = line.find('digest algo ')
            j = line.find(', begin')
            if i >= 0 and j > i:
              hashalgo = line[i + 12:j]
              if not firstsig:
                print('  SIGNED  %s UID %s = %s' % (skey, suid, uidstring))
                firstsig = True
              print('    BY %s = %s WITH %s' %
                    (keyid, self.get_hex2string(keyid),
                       self.hashalgo_name(hashalgo)))
    return 0

  def list_sigs_pub(self, fields):
    "Handler for list_sigs()"
    # pub
    # pubalgo
    # key length
    # key
    # creation data
    # capability
    # expires
    fmt = '%%-%ds %%s %%s %%s 0x%%s %%s %%s %%s' % self.hashalgo_max
    print(fmt %
          (' ', fields[0], self.pubalgo_name(fields[3]), fields[2],
             fields[4],
             timestamp_to_date(fields[5]), capability(fields[11]),
             expires_to_date(fields[6])))

  def list_sigs_fpr(self, fields):
    "Handler for list_sigs()"
    pass
    # fpr
    # fingerprint
    # print('%s %s' %
    #       (fields[0], fields[9]))

  def list_sigs_uid(self, fields):
    "Handler for list_sigs()"
    # field[0] is the integer number of the UID
    # fpr
    # fingerprint
    fmt = '%%-%ds uid #%%d  %%s %%s' % self.hashalgo_max
    print(fmt %
          (' ', fields[0], validity(fields[1]), fields[9]))

  def list_sigs_sig(self, fields):
    "Handler for list_sigs()"
    # hashalgo
    # sig
    # sigclass
    # keyid
    # creation data
    # uid
    uid = self.get_hex2string(fields[4])
    fmt = '%%-%ds %%s %%s  %%s %%s  %%s' % self.hashalgo_max
    print(fmt %
          (self.hashalgo_name(fields[15]), fields[0],
             signature_class(fields[10]), fields[4],
             timestamp_to_date(fields[5]), uid))

  def list_sigs_unk(self, fields):
    "Handler for list_sigs()"
    pass
    # print('%s [this record type not yet handled by %s]' %
    #       (fields[0], self.args.program))

  def list_sigs(self, homedir, principal, signatory = None):
    """
    Common function for signatures() and outgoing() to show
    signature strength (hash algorithm) of the signers (or just one signatory).
    """
    cmd = 'gpg --homedir %s --with-colons --list-sigs %s' % (homedir, principal)
    gpg = os.popen(cmd)
    lines = gpg.readlines()
    gpg.close()
    uid = 0
    for line in lines:
      fields = line.split(':')
      if len(fields) > 0:
        record = fields[0]
        if record == 'uid':
          uid += 1
          fields[0] = uid # special case for uid
        elif record == 'sig' and signatory and '0x' + fields[4] != signatory:
          continue
        elif record == 'sub':
          break # don't bother with sigs on subkeys
        elif not record in self.list_sigs_handlers:
          record = 'unk'
        self.list_sigs_handlers[record](fields)
    return 0

  def outgoing(self):
    """
    This function is indended to help users understand what
    hash algorithm has been used to sign other people's keys
    after a Key Signing Party when they have used caff.

    It certainly may be possible to inspect the output
    of self.args.caffhome + '/keys' but this implementation
    will use the caff separate public ring:
    self.args.caffhome + '/gnupghome/pubring.gpg'.

    This function uses the CAFFHOME keyring as that is the typical
    place where outgoing signatures are stored.  Of course CAFFHOME
    can be overidden as a command line argument to inspect (more
    generally) how KEY signed OUTGOING (set --caffhome to ~/.gnupg )
    """
    # if self.args.verbose:
    #   print('Outgoing signatures of %s = %s\n  BY %s = %s' %
    #         (self.args.outgoing, self.outgoing_string,
    #            self.args.key, self.key_string))
    return self.list_sigs(self.args.caffhome,
                         self.args.outgoing, self.args.key)

  def signatures(self):
    """
    Print hash algorithm for signatures for the ID
    """
    return self.list_sigs(self.args.gnupghome, self.args.key)

  def run(self):
    "Dispatch on action"
    return getattr(self, self.args.action)()


def main():
  program = sys.argv[0]
  if program[0] != '/':
    program = os.path.join(os.getcwd(), program)
  pdir = os.path.normpath(os.path.dirname(program))
  program = os.path.basename(program)
  envvar = program.upper()
  envval = None
  envargs = []
  if envvar in os.environ:
    envval = os.environ[envvar]
    envargs = envval.split()
  while len(envargs): # add env args
    sys.argv.insert(1, envargs.pop())
  kspsig_envar = textwrap.dedent('''
    The KSPSIG environment var may be set to one (or more)
    command line arguments (processed before the actual command line)
    for example:
    $ KSPSIG="--quiet --no-pedantic" kspsig -v -i *.asc
    ''')
  parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=kspsig_envar)
  parser.add_argument('-V', '--version', action='version',
                      version=KSPSig.VERSION)
  parser.add_argument('-v', '--verbose', action='store_true',
                      help='verbose mode')
  parser.add_argument('-q', '--quiet', action='store_true',
                      help='quiet mode (turns off verbose)')
  parser.add_argument('-p', '--no-pedantic', action='store_true',
                      help='do not emit pedantic warnings')
  # we don't set a default here because the user may override gnupghome
  parser.add_argument('-k', '--key', help='ID to check')
  gnupghome_default = '~/.gnupg'
  parser.add_argument('-g', '--gnupghome', default=gnupghome_default,
                      help='GnuPG home directory [%s]' % gnupghome_default)
  caffhome_default = '~/.caff/gnupghome'
  parser.add_argument('-c', '--caffhome', default=caffhome_default,
                      help='caff GnuPG home directory [%s]' % caffhome_default)
  # additional args for incoming or signatures
  parser.add_argument('args', nargs=argparse.REMAINDER,
                      help='arguments for the default action')
  # ACTIONS -------------------
  parser.add_argument('-i', '--incoming', nargs='+',
                      help='check incoming signature file(s) (default action)')
  parser.add_argument('-o', '--outgoing',
                      help='check signature of OUTGOING by KEY')
  parser.add_argument('-s', '--signatures', action='store_true',
                      help='check signatures for key')
  args = parser.parse_args()
  args.program = program
  args.pdir = pdir
  args.action = None
  if args.outgoing:
    args.action = 'outgoing'
  if args.signatures:
    if args.action:
      print('must specify only one action: --signatures --incoming --outgoing')
      sys.exit(1)
    else:
      args.action = 'signatures'
      if not args.key and len(args.args) == 1:
        args.key = args.args[0]
  if args.incoming:
    if args.action:
      print('must specify only one action: --signatures --incoming --outgoing')
      sys.exit(1)
    else:
      args.action = 'incoming'
  if not args.action:
    args.action = 'incoming' # default action
    args.incoming = args.args
    args.args = []
  if args.quiet:
    args.verbose = False
  args.gnupghome = os.path.expanduser(args.gnupghome)
  if not os.path.exists(args.gnupghome):
    print('GNUPGHOME not found: %s' % args.gnupghome)
    sys.exit(1)
  args.caffhome = os.path.expanduser(args.caffhome)
  if not os.path.exists(args.caffhome):
    print('warning: CAFFHOME not found: %s' % args.caffhome)
    # sys.exit(1)
  if args.verbose:
    print('%s version %s from %s' % (args.program, KSPSig.VERSION, args.pdir))
    print('action: %s %s' % (args.action, str(args.args)))
    print('incoming: %s' % str(args.incoming))
    print('outgoing: %s' % args.outgoing)
    print('no-pedantic: %s' % str(args.no_pedantic))
    print('key: %s' % args.key)
    print('GNUPGHOME: %s' % args.gnupghome)
    print('CAFFHOME: %s' % args.caffhome)
    print('args from %s: %s' % (envvar,envval))
  return KSPSig(args).run()

if __name__ == '__main__':
  sys.exit(main())
